# -*- coding: utf-8 -*-
"""Assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TQYiNEfCA1tGwg0ooFVbW3oQ6-XuU3gx
"""



"""Import the data """

import os
import tarfile
import urllib.request

DOWNLOAD_ROOT = "https://raw.githubusercontent.com/ageron/handson-ml2/master/"
HOUSING_PATH = os.path.join("datasets", "housing")
HOUSING_URL = DOWNLOAD_ROOT + "datasets/housing/housing.tgz"

def fetch_housing_data(housing_url=HOUSING_URL, housing_path=HOUSING_PATH):
    if not os.path.isdir(housing_path):
        os.makedirs(housing_path)
    tgz_path = os.path.join(housing_path, "housing.tgz")
    urllib.request.urlretrieve(housing_url, tgz_path)
    housing_tgz = tarfile.open(tgz_path)
    housing_tgz.extractall(path=housing_path)
    housing_tgz.close()

fetch_housing_data()

import pandas as pd

def load_housing_data(housing_path=HOUSING_PATH):
    csv_path = os.path.join(housing_path, "housing.csv")
    return pd.read_csv(csv_path)

"""Using info function to get a description of data"""

housing.info()

"""It seems that Oceacn Proximity is a categorical data.We can find what categories exist and how many districts belong to each categoryby using values_counts() method:"""



housing["ocean_proximity"].value_counts()

"""Using describe() method to get summary about the of numerical attribute."""

housing.describe()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline 
import matplotlib.pyplot as plt
housing.hist(bins = 50, figsize=(20,15))
plt.show()

"""Looking for correlation...."""

corr_matrix = housing.corr()

"""  The target variable is median_house_value. It is important to see which feature is highly related to the target variable."""

corr_matrix["median_house_value"].sort_values(ascending=False)

"""median_income ia a very important attribute to predict median housing prices. We want to ensure that the test set is representative of the various categories of incomes."""

from pandas.plotting import scatter_matrix
attributes = ["median_house_value","median_income","total_rooms","housing_median_age"]
scatter_matrix(housing[attributes],figsize=(12,12))

import numpy as np
housing["income_cat"] = pd.cut(housing["median_income"],bins=[0.,1.5,3.0,4.5,6.,np.inf],labels=[1,2,3,4,5])

housing["income_cat"].hist()

"""Now splitting the data


"""



from sklearn.model_selection import StratifiedShuffleSplit
split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state = 42)
for train_index, test_index in split.split(housing,housing["income_cat"]):
  strat_train_set = housing.loc[train_index]
  strat_test_set = housing.loc[test_index]

strat_train_set.head()

house_train = strat_train_set[["median_income","total_rooms","housing_median_age" ]]
house_label1 =strat_train_set[["median_house_value"]]
house_label1.head()

house_test = strat_test_set[["median_income","total_rooms","housing_median_age"]]
house_test.head()
house_label2 = strat_test_set[["median_house_value"]]

from sklearn.preprocessing import StandardScaler
std_scalar = StandardScaler()
house_train = std_scalar.fit_transform(house_train)
house_test = std_scalar.fit_transform(house_test)
house_train = pd.DataFrame(house_train)
house_train.head()
house_test = pd.DataFrame(house_test)
house_test.head()

from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(house_train, house_label1)

from sklearn.metrics import mean_squared_error
housing_predictions = lin_reg.predict(house_test)
lin_mse = mean_squared_error(house_label2,housing_predictions)
lin_mse = np.sqrt(lin_mse)
lin_mse

from sklearn.metrics import mean_absolute_error
lin_mae = mean_absolute_error(house_label2,housing_predictions)
lin_mae

from sklearn.metrics import r2_score
lin_r2_score = r2_score(house_label2,housing_predictions)
lin_r2_score

from sklearn.linear_model import SGDRegressor

sgd_regressor = SGDRegressor(max_iter = 10000, tol = 1e-3,penalty=None,alpha=0.001,learning_rate='optimal')
sgd_regressor.fit(house_train,house_label1.values.ravel())


sgd_predictions = sgd_regressor.predict(house_test)

mse = mean_squared_error(house_label2,sgd_predictions)
mse = np.sqrt(mse)
mse

sgd_mae = mean_absolute_error(house_label2,sgd_predictions)
sgd_mae

sgd_r2_score = r2_score(house_label2, sgd_predictions)
sgd_r2_score

